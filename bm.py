import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters
)
import datetime
import time
import os

# Bot Configuration
BOT_TOKEN = "8125880528:AAHRUQpcmN645oKmvjt8OeGSGVjG_9Aas38"
CHANNEL_ID = -1001234567890  # Your channel ID with videos
VERIFICATION_CHANNEL = -1001234567891  # Channel user must join
ADMIN_ID = 8167507955  # Your admin ID

# Enable logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Store user progress
user_data = {}
blocked_users = set()

# Hindi texts with sexy language
WELCOME_TEXT = """
üî• *‡§ñ‡§º‡•ç‡§µ‡§æ‡§π‡§ø‡§∂‡•ã‡§Ç ‡§ï‡§æ ‡§∞‡§æ‡§ú‡§º ‡§¨‡•â‡§ü ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à!* üî•

üíã ‡§Ø‡§π‡§æ‡§Å ‡§Æ‡§ø‡§≤‡•á‡§ó‡§æ:
‚úÖ ‡§ó‡§∞‡•ç‡§Æ‡§æ‡§ó‡§∞‡•ç‡§Æ ‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø ‡§ï‡§Ç‡§ü‡•á‡§Ç‡§ü
‚úÖ ‡§™‡•ç‡§∞‡§æ‡§á‡§µ‡•á‡§ü ‡§∏‡•á‡§ï‡•ç‡§∏‡•Ä ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã
‚úÖ ‡§µ‡•ã ‡§∏‡§¨ ‡§ï‡•Å‡§õ ‡§ú‡•ã ‡§Ü‡§™‡§ï‡•Ä ‡§∞‡§æ‡§§‡•ã‡§Ç ‡§ï‡•ã ‡§ó‡§∞‡•ç‡§Æ ‡§ï‡§∞ ‡§¶‡•á

üìõ *‡§®‡§ø‡§Ø‡§Æ:* 
1. ‡§™‡§π‡§≤‡•á ‡§π‡§Æ‡§æ‡§∞‡•á ‡§ö‡•à‡§®‡§≤ ‡§ï‡•ã ‡§ú‡•ç‡§µ‡§æ‡§á‡§® ‡§ï‡§∞‡•á‡§Ç
2. ‡§µ‡•á‡§∞‡•Ä‡§´‡§æ‡§à ‡§ï‡§∞‡•á‡§Ç
3. ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§ï‡§æ ‡§Æ‡§ú‡§æ ‡§≤‡•á‡§Ç

üëá ‡§®‡•Ä‡§ö‡•á ‡§¨‡§ü‡§® ‡§¶‡§¨‡§æ‡§ï‡§∞ ‡§ö‡•à‡§®‡§≤ ‡§ú‡•ç‡§µ‡§æ‡§á‡§® ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§Ö‡§™‡§®‡•Ä ‡§á‡§ö‡•ç‡§õ‡§æ‡§ì‡§Ç ‡§ï‡•ã ‡§Ü‡§ú‡§æ‡§¶ ‡§ï‡§∞‡•á‡§Ç!
"""

VERIFIED_TEXT = """
üí¶ *‡§µ‡•á‡§∞‡•Ä‡§´‡§æ‡§à ‡§π‡•ã ‡§ó‡§Ø‡§æ! ‡§Ö‡§¨ ‡§§‡•Å‡§Æ‡•ç‡§π‡§æ‡§∞‡•Ä ‡§¨‡§æ‡§∞‡•Ä ‡§π‡•à...* üí¶

‡§Ö‡§®‡§≤‡•â‡§ï ‡§π‡•Å‡§Ü:
ü•µ 100+ ‡§™‡•ç‡§∞‡§æ‡§á‡§µ‡•á‡§ü ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã
üçë ‡§ó‡•Å‡§™‡•ç‡§§ ‡§ï‡§≤‡•á‡§ï‡•ç‡§∂‡§®
üî• ‡§µ‡•ã ‡§∏‡•Ä‡§® ‡§ú‡•ã ‡§Ü‡§™‡§ï‡•ã ‡§™‡§æ‡§ó‡§≤ ‡§ï‡§∞ ‡§¶‡•á‡§Ç

üëá ‡§Ö‡§≠‡•Ä 20 ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§´‡•ç‡§∞‡•Ä ‡§Æ‡•á‡§Ç ‡§™‡§æ‡§è‡§Ç!
"""

VIDEO_SENT_TEXT = """
üí¶ *{} ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§Ü‡§™‡§ï‡•á ‡§≤‡§ø‡§è ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§π‡•à‡§Ç!* üí¶

‡§Ö‡§ó‡§≤‡•á 20 ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§™‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§®‡•Ä‡§ö‡•á ‡§¨‡§ü‡§® ‡§¶‡§¨‡§æ‡§è‡§Ç...
‡§Ø‡§æ ‡§®‡§è ‡§∏‡§ø‡§∞‡•á ‡§∏‡•á ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç!

‚ù§Ô∏è ‡§Ö‡§ó‡§∞ ‡§Ü‡§™‡§ï‡•ã ‡§¨‡•â‡§ü ‡§™‡§∏‡§Ç‡§¶ ‡§Ü‡§Ø‡§æ ‡§§‡•ã ‡§¶‡•ã‡§∏‡•ç‡§§‡•ã‡§Ç ‡§ï‡•ã ‡§≠‡•Ä ‡§¨‡§§‡§æ‡§è‡§Ç!
"""

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send welcome message"""
    user_id = update.effective_user.id
    if user_id in blocked_users:
        await update.message.reply_text("üö´ ‡§Ü‡§™‡§ï‡•ã ‡§¨‡•ç‡§≤‡•â‡§ï ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à!")
        return
    
    username = update.effective_user.username or "No username"
    user_data[user_id] = {
        'verified': False, 
        'last_sent': 0, 
        'username': username, 
        'join_date': datetime.datetime.now(),
        'video_count': 0
    }
    
    # Notify admin
    try:
        await context.bot.send_message(
            ADMIN_ID,
            f"üÜï ‡§®‡§Ø‡§æ ‡§Ø‡•Ç‡§ú‡§∞!\nID: {user_id}\nUsername: @{username}"
        )
    except Exception as e:
        logger.error(f"Error notifying admin: {e}")
    
    keyboard = [
        [InlineKeyboardButton("üíã ‡§ö‡•à‡§®‡§≤ ‡§ú‡•ç‡§µ‡§æ‡§á‡§® ‡§ï‡§∞‡•á‡§Ç", url="https://t.me/your_channel")],
        [InlineKeyboardButton("üî• ‡§µ‡•á‡§∞‡•Ä‡§´‡§æ‡§à ‡§ï‡§∞‡•á‡§Ç", callback_data='verify_join')]
    ]
    await update.message.reply_text(
        WELCOME_TEXT,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

async def verify_join(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Verify channel membership"""
    query = update.callback_query
    await query.answer()
    
    if query.from_user.id in blocked_users:
        await query.edit_message_text("üö´ ‡§Ü‡§™‡§ï‡•ã ‡§¨‡•ç‡§≤‡•â‡§ï ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à!")
        return
    
    try:
        member = await context.bot.get_chat_member(VERIFICATION_CHANNEL, query.from_user.id)
        if member.status in ['member', 'administrator', 'creator']:
            user_data[query.from_user.id]['verified'] = True
            await query.edit_message_text(
                VERIFIED_TEXT,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üí¶ 20 ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§™‡§æ‡§è‡§Ç", callback_data='get_videos')]
                ]),
                parse_mode='Markdown'
            )
        else:
            await query.answer("‚ùå ‡§™‡§π‡§≤‡•á ‡§ö‡•à‡§®‡§≤ ‡§ú‡•ç‡§µ‡§æ‡§á‡§® ‡§ï‡§∞‡•á‡§Ç!", show_alert=True)
    except Exception as e:
        logger.error(f"Verification error: {e}")
        await query.answer("‚ùå ‡§µ‡•á‡§∞‡•Ä‡§´‡§æ‡§à ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã ‡§™‡§æ‡§Ø‡§æ. ‡§´‡§ø‡§∞ ‡§∏‡•á ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡•á‡§Ç.", show_alert=True)

async def send_videos(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send video batch"""
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    
    if user_id in blocked_users:
        await query.edit_message_text("üö´ ‡§Ü‡§™‡§ï‡•ã ‡§¨‡•ç‡§≤‡•â‡§ï ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à!")
        return
    
    if not user_data.get(user_id, {}).get('verified'):
        await query.answer("‡§™‡§π‡§≤‡•á ‡§µ‡•á‡§∞‡•Ä‡§´‡§æ‡§à ‡§ï‡§∞‡•á‡§Ç!", show_alert=True)
        return
    
    await query.edit_message_text("üíã ‡§Ü‡§™‡§ï‡•á ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§ï‡§ø‡§è ‡§ú‡§æ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç...")
    
    # Send 20 videos
    sent = 0
    last_msg = user_data[user_id]['last_sent']
    
    for msg_id in range(last_msg + 1, last_msg + 21):
        try:
            await context.bot.copy_message(
                chat_id=query.message.chat_id,
                from_chat_id=CHANNEL_ID,
                message_id=msg_id
            )
            sent += 1
            user_data[user_id]['video_count'] += 1
            time.sleep(1)  # Avoid flooding
        except Exception as e:
            logger.error(f"Error sending video {msg_id}: {e}")
    
    if sent > 0:
        user_data[user_id]['last_sent'] += sent
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text=VIDEO_SENT_TEXT.format(sent),
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üí¶ ‡§Ö‡§ó‡§≤‡•á 20 ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã", callback_data='next_batch')],
                [InlineKeyboardButton("üî• ‡§®‡§Ø‡§æ ‡§∏‡§§‡•ç‡§∞", callback_data='get_videos')]
            ]),
            parse_mode='Markdown'
        )
    else:
        await query.edit_message_text("‚ùå ‡§ï‡•ã‡§à ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à!")

# Admin commands
async def status(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show bot status"""
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå ‡§∏‡§ø‡§∞‡•ç‡§´ ‡§è‡§°‡§Æ‡§ø‡§® ‡§ï‡•á ‡§≤‡§ø‡§è!")
        return
    
    total_users = len(user_data)
    active_users = sum(1 for user in user_data.values() if user['verified'])
    total_videos = sum(user['video_count'] for user in user_data.values())
    
    status_text = f"""
üìä *‡§¨‡•â‡§ü ‡§∏‡•ç‡§ü‡•á‡§ü‡§∏* üìä

üë• ‡§ï‡•Å‡§≤ ‡§Ø‡•Ç‡§ú‡§∞‡•ç‡§∏: {total_users}
üíã ‡§è‡§ï‡•ç‡§ü‡§ø‡§µ ‡§Ø‡•Ç‡§ú‡§∞‡•ç‡§∏: {active_users}
üö´ ‡§¨‡•ç‡§≤‡•â‡§ï‡•ç‡§° ‡§Ø‡•Ç‡§ú‡§∞‡•ç‡§∏: {len(blocked_users)}
üé¨ ‡§≠‡•á‡§ú‡•á ‡§ó‡§è ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã: {total_videos}
üÜï ‡§Ü‡§ú ‡§ï‡•á ‡§®‡§è ‡§Ø‡•Ç‡§ú‡§∞‡•ç‡§∏: {sum(1 for user in user_data.values() if (datetime.datetime.now() - user['join_date']).days == 0)}
"""
    await update.message.reply_text(status_text, parse_mode='Markdown')

async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Broadcast message to all users"""
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå ‡§∏‡§ø‡§∞‡•ç‡§´ ‡§è‡§°‡§Æ‡§ø‡§® ‡§ï‡•á ‡§≤‡§ø‡§è!")
        return
    
    if not context.args:
        await update.message.reply_text("Usage: /broadcast Your message")
        return
    
    message = ' '.join(context.args)
    success = 0
    failed = 0
    
    for user_id in user_data:
        try:
            await context.bot.send_message(user_id, f"üì¢ *‡§è‡§°‡§Æ‡§ø‡§® ‡§ï‡§æ ‡§∏‡§Ç‡§¶‡•á‡§∂:*\n\n{message}", parse_mode='Markdown')
            success += 1
        except Exception as e:
            logger.error(f"Error broadcasting to {user_id}: {e}")
            failed += 1
        time.sleep(0.5)  # Avoid rate limiting
    
    await update.message.reply_text(f"üì£ ‡§¨‡•ç‡§∞‡•â‡§°‡§ï‡§æ‡§∏‡•ç‡§ü ‡§∞‡§ø‡§ú‡§≤‡•ç‡§ü:\n‚úÖ ‡§∏‡§´‡§≤: {success}\n‚ùå ‡§´‡•á‡§≤: {failed}")

async def ping(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Check server ping"""
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå ‡§∏‡§ø‡§∞‡•ç‡§´ ‡§è‡§°‡§Æ‡§ø‡§® ‡§ï‡•á ‡§≤‡§ø‡§è!")
        return
    
    start_time = time.time()
    message = await update.message.reply_text("üèì ‡§™‡§ø‡§Ç‡§ó ‡§ö‡•á‡§ï ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ ‡§∞‡§π‡§æ ‡§π‡•à...")
    end_time = time.time()
    elapsed_time = round((end_time - start_time) * 1000, 2)
    
    await message.edit_text(f"‚ö° ‡§∏‡§∞‡•ç‡§µ‡§∞ ‡§™‡§ø‡§Ç‡§ó: {elapsed_time}ms")

async def block_user(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Block a user"""
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå ‡§∏‡§ø‡§∞‡•ç‡§´ ‡§è‡§°‡§Æ‡§ø‡§® ‡§ï‡•á ‡§≤‡§ø‡§è!")
        return
    
    if not context.args:
        await update.message.reply_text("Usage: /block <user_id>")
        return
    
    try:
        user_id = int(context.args[0])
        blocked_users.add(user_id)
        await update.message.reply_text(f"‚úÖ ‡§Ø‡•Ç‡§ú‡§∞ {user_id} ‡§ï‡•ã ‡§¨‡•ç‡§≤‡•â‡§ï ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ!")
    except ValueError:
        await update.message.reply_text("‚ùå ‡§ó‡§≤‡§§ ‡§Ø‡•Ç‡§ú‡§∞ ‡§Ü‡§à‡§°‡•Ä!")

async def unblock_user(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Unblock a user"""
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå ‡§∏‡§ø‡§∞‡•ç‡§´ ‡§è‡§°‡§Æ‡§ø‡§® ‡§ï‡•á ‡§≤‡§ø‡§è!")
        return
    
    if not context.args:
        await update.message.reply_text("Usage: /unblock <user_id>")
        return
    
    try:
        user_id = int(context.args[0])
        blocked_users.discard(user_id)
        await update.message.reply_text(f"‚úÖ ‡§Ø‡•Ç‡§ú‡§∞ {user_id} ‡§ï‡•ã ‡§Ö‡§®‡§¨‡•ç‡§≤‡•â‡§ï ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ!")
    except ValueError:
        await update.message.reply_text("‚ùå ‡§ó‡§≤‡§§ ‡§Ø‡•Ç‡§ú‡§∞ ‡§Ü‡§à‡§°‡•Ä!")

def main() -> None:
    """Run bot"""
    application = Application.builder().token(BOT_TOKEN).build()
    
    # Handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(verify_join, pattern="^verify_join$"))
    application.add_handler(CallbackQueryHandler(send_videos, pattern="^(get_videos|next_batch)$"))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, start))
    
    # Admin handlers
    application.add_handler(CommandHandler("status", status))
    application.add_handler(CommandHandler("broadcast", broadcast))
    application.add_handler(CommandHandler("ping", ping))
    application.add_handler(CommandHandler("block", block_user))
    application.add_handler(CommandHandler("unblock", unblock_user))
    
    # Start bot
    application.run_polling()
    logger.info("Bot is running...")

if __name__ == "__main__":
    main()
