import time
import random
import threading
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.common.keys import Keys
import undetected_chromedriver as uc

# рдкреНрд░реЙрдХреНрд╕реА рд▓рд┐рд╕реНрдЯ (рдЕрдкрдиреА рдкреНрд░реЙрдХреНрд╕реА рдбрд╛рд▓реЗрдВ)
PROXY_LIST = [
    "193.123.225.255:8080",
    "45.67.89.123:3128",
    "111.222.333.444:8080"
]

# рдпреВрдЬрд░ рдПрдЬреЗрдВрдЯ рд▓рд┐рд╕реНрдЯ
USER_AGENTS = [
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
    "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
]

def setup_driver():
    options = uc.ChromeOptions()
    
    # рдкреНрд░реЙрдХреНрд╕реА рд╕реЗрдЯрдЕрдк
    if PROXY_LIST:
        proxy = random.choice(PROXY_LIST)
        options.add_argument(f'--proxy-server=http://{proxy}')
    
    # рд╣реЗрдбрд▓реЗрд╕ рдореЛрдб (рдЪреБрдкрдХреЗ рд╕реЗ рдЪрд▓рдиреЗ рдХреЗ рд▓рд┐рдП)
    options.add_argument('--headless=new')
    options.add_argument('--disable-gpu')
    options.add_argument('--no-sandbox')
    options.add_argument('--disable-dev-shm-usage')
    
    # рд░реИрдВрдбрдо рдпреВрдЬрд░ рдПрдЬреЗрдВрдЯ
    user_agent = random.choice(USER_AGENTS)
    options.add_argument(f'user-agent={user_agent}')
    
    # рдмреЙрдЯ рдбрд┐рдЯреЗрдХреНрд╢рди рд╕реЗ рдмрдЪрд╛рд╡
    driver = uc.Chrome(
        options=options,
        use_subprocess=True,
    )
    return driver

def human_like_actions(driver):
    try:
        # рд░реИрдВрдбрдо рд╕реНрдХреНрд░реЙрд▓рд┐рдВрдЧ
        for _ in range(random.randint(3, 7)):
            scroll_px = random.randint(300, 800)
            driver.execute_script(f"window.scrollBy(0, {scroll_px})")
            time.sleep(random.uniform(0.5, 2))
        
        # рд░реИрдВрдбрдо рдХреНрд▓рд┐рдХ (рдЕрдЧрд░ рдХреЛрдИ рдмрдЯрди рдорд┐рд▓реЗ)
        buttons = driver.find_elements(By.TAG_NAME, "button")
        if buttons:
            random.choice(buttons).click()
            time.sleep(random.uniform(1, 3))
        
        # рдХреАрдмреЛрд░реНрдб рдХреА рд░реИрдВрдбрдо рдХреА рдкреНрд░реЗрд╕
        actions = ActionChains(driver)
        actions.send_keys(Keys.SPACE).pause(1).send_keys(Keys.ARROW_DOWN).perform()
    except:
        pass

def send_view(link):
    driver = setup_driver()
    try:
        driver.get(link)
        time.sleep(random.randint(5, 10))  # рдкреЗрдЬ рд▓реЛрдб рд╣реЛрдиреЗ рдХрд╛ рдЗрдВрддрдЬрд╝рд╛рд░
        
        # рд╣реНрдпреВрдорди рдЬреИрд╕реА рдПрдХреНрдЯрд┐рд╡рд┐рдЯреАрдЬ
        human_like_actions(driver)
        
        # рд╡реАрдбрд┐рдпреЛ рдЪрд▓рд╛рдиреЗ рдХреА рдХреЛрд╢рд┐рд╢
        try:
            play_button = driver.find_element(By.CSS_SELECTOR, "button[aria-label='Play']")
            play_button.click()
            time.sleep(random.randint(10, 20))  # рд╡реАрдбрд┐рдпреЛ рдЪрд▓рдиреЗ рджреЗрдВ
        except:
            pass
        
        print(f"тЬЕ рд╡реНрдпреВ рднреЗрдЬрд╛ рдЧрдпрд╛! (Session: {driver.session_id})")
        return True
    except Exception as e:
        print(f"тЭМ ERROR: {str(e)[:100]}...")
        return False
    finally:
        driver.quit()

def worker(link, views_per_thread):
    for i in range(views_per_thread):
        print(f"ЁЯУб {threading.current_thread().name} - рд╡реНрдпреВ {i+1} рднреЗрдЬрд╛ рдЬрд╛ рд░рд╣рд╛ рд╣реИ...")
        success = send_view(link)
        if not success:
            print("тЪая╕П рд░рд┐рдкреАрдЯ рдХрд░рдиреЗ рдХрд╛ рдкреНрд░рдпрд╛рд╕...")
            time.sleep(5)
            send_view(link)
        wait_time = random.randint(15, 30)
        print(f"тП│ рдЕрдЧрд▓реЗ рд╡реНрдпреВ рд╕реЗ рдкрд╣рд▓реЗ {wait_time} рд╕реЗрдХрдВрдб рдЗрдВрддрдЬрд╝рд╛рд░...")
        time.sleep(wait_time)

def main():
    print("""
    тЦИтЦИтЦИтЦИтЦИтЦИтЦИтЦИтХЧтЦИтЦИтЦИтЦИтЦИтЦИтЦИтХЧтЦИтЦИтЦИтЦИтЦИтЦИтХЧ  тЦИтЦИтЦИтЦИтЦИтХЧ тЦИтЦИтЦИтЦИтЦИтЦИтХЧ  тЦИтЦИтЦИтЦИтЦИтЦИтХЧ тЦИтЦИтХЧ  тЦИтЦИтХЧ
    тХЪтХРтХРтЦИтЦИтХФтХРтХРтХЭтЦИтЦИтХФтХРтХРтХРтХРтХЭтЦИтЦИтХФтХРтХРтЦИтЦИтХЧтЦИтЦИтХФтХРтХРтЦИтЦИтХЧтЦИтЦИтХФтХРтХРтЦИтЦИтХЧтЦИтЦИтХФтХРтХРтХРтЦИтЦИтХЧтХЪтЦИтЦИтХЧтЦИтЦИтХФтХЭ
       тЦИтЦИтХС   тЦИтЦИтЦИтЦИтЦИтХЧ  тЦИтЦИтЦИтЦИтЦИтЦИтХФтХЭтЦИтЦИтЦИтЦИтЦИтЦИтЦИтХСтЦИтЦИтЦИтЦИтЦИтЦИтХФтХЭтЦИтЦИтХС   тЦИтЦИтХС тХЪтЦИтЦИтЦИтХФтХЭ 
       тЦИтЦИтХС   тЦИтЦИтХФтХРтХРтХЭ  тЦИтЦИтХФтХРтХРтЦИтЦИтХЧтЦИтЦИтХФтХРтХРтЦИтЦИтХСтЦИтЦИтХФтХРтХРтЦИтЦИтХЧтЦИтЦИтХС   тЦИтЦИтХС тЦИтЦИтХФтЦИтЦИтХЧ 
       тЦИтЦИтХС   тЦИтЦИтЦИтЦИтЦИтЦИтЦИтХЧтЦИтЦИтХС  тЦИтЦИтХСтЦИтЦИтХС  тЦИтЦИтХСтЦИтЦИтЦИтЦИтЦИтЦИтХФтХЭтХЪтЦИтЦИтЦИтЦИтЦИтЦИтХФтХЭтЦИтЦИтХФтХЭ тЦИтЦИтХЧ
       тХЪтХРтХЭ   тХЪтХРтХРтХРтХРтХРтХРтХЭтХЪтХРтХЭ  тХЪтХРтХЭтХЪтХРтХЭ  тХЪтХРтХЭтХЪтХРтХРтХРтХРтХРтХЭ  тХЪтХРтХРтХРтХРтХРтХЭ тХЪтХРтХЭ  тХЪтХРтХЭ
    ========================================================
    KHATARNAK Terabox View Bot | 100% Undetectable
    """)
    
    link = input("Terabox Video Link: ").strip()
    total_views = int(input("рдХрд┐рддрдиреЗ рд╡реНрдпреВрдЬ рднреЗрдЬрдиреЗ рд╣реИрдВ?: "))
    threads = int(input("рдХрд┐рддрдиреЗ рдереНрд░реЗрдбреНрд╕ рдЪрд▓рд╛рдиреЗ рд╣реИрдВ? (рдЬреНрдпрд╛рджрд╛ = рддреЗрдЬ): "))
    
    views_per_thread = total_views // threads
    print(f"\nЁЯЪА рдкреНрд░рддреНрдпреЗрдХ рдереНрд░реЗрдб {views_per_thread} рд╡реНрдпреВрдЬ рднреЗрдЬреЗрдЧрд╛...\n")
    
    # рдорд▓реНрдЯреА-рдереНрд░реЗрдбрд┐рдВрдЧ рд╢реБрд░реВ рдХрд░реЗрдВ
    all_threads = []
    for i in range(threads):
        t = threading.Thread(
            target=worker,
            args=(link, views_per_thread),
            name=f"Thread-{i+1}"
        )
        t.start()
        all_threads.append(t)
    
    for t in all_threads:
        t.join()
    
    print("\nЁЯОЙ рд╕рднреА рд╡реНрдпреВрдЬ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рднреЗрдЬ рджрд┐рдП рдЧрдП!")

if __name__ == "__main__":
    main()
